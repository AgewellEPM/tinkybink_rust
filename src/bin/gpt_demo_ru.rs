//! üá∑üá∫ –†—É—Å—Å–∫–∞—è GPT –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è - –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è AAC –°–∏—Å—Ç–µ–º–∞
//! 
//! –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –º–æ—â—å —Ä—É—Å—Å–∫–æ–≥–æ GPT —è–¥—Ä–∞ —Å:
//! - –û–±—Ä–∞–±–æ—Ç–∫–æ–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
//! - –ö—É–ª—å—Ç—É—Ä–Ω—ã–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º –≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ–º
//! - –†—É—Å—Å–∫–∏–º–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏
//! - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏

use anyhow::Result;
use colored::*;
use std::io::{self, Write};
use tinkybink_rust::ai::gpt_core_ru::{–†—É—Å—Å–∫–æ–µ–Ø–¥—Ä–æGPT, –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—èGPT, –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ–°–æ—Å—Ç–æ—è–Ω–∏–µ};
use serde_json::Value;
use std::fs;
use std::path::Path;

/// –ó–∞–≥—Ä—É–∑—á–∏–∫ —Ä—É—Å—Å–∫–∏—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
struct –†—É—Å—Å–∫–∏–π–ó–∞–≥—Ä—É–∑—á–∏–∫–î–∞–Ω–Ω—ã—Ö {
    —Å–ª–æ–≤–∞—Ä—å: Vec<String>,
    –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: Vec<Vec<String>>,
    —ç–º–æ—Ü–∏–∏: Vec<–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ–°–æ—Å—Ç–æ—è–Ω–∏–µ>,
}

impl –†—É—Å—Å–∫–∏–π–ó–∞–≥—Ä—É–∑—á–∏–∫–î–∞–Ω–Ω—ã—Ö {
    fn –Ω–æ–≤—ã–π() -> Result<Self> {
        let mut —Å–ª–æ–≤–∞—Ä—å = Vec::new();
        let mut –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è = Vec::new();
        let mut —ç–º–æ—Ü–∏–∏ = Vec::new();
        
        // –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ —Ä—É—Å—Å–∫–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–µ —Ñ–∞–π–ª—ã
        let –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è_—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ = Path::new("training_ru");
        if –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è_—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.exists() {
            for –∑–∞–ø–∏—Å—å in fs::read_dir(–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è_—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏)? {
                let –∑–∞–ø–∏—Å—å = –∑–∞–ø–∏—Å—å?;
                let –ø—É—Ç—å = –∑–∞–ø–∏—Å—å.path();
                if –ø—É—Ç—å.extension().and_then(|s| s.to_str()) == Some("json") {
                    let —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ = fs::read_to_string(&–ø—É—Ç—å)?;
                    let –¥–∞–Ω–Ω—ã–µ: Value = serde_json::from_str(&—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ)?;
                    
                    if let Some(—É–∑–ª—ã) = –¥–∞–Ω–Ω—ã–µ["nodes"].as_array() {
                        for —É–∑–µ–ª in —É–∑–ª—ã {
                            // –ò–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç
                            if let Some(—Ç–µ–∫—Å—Ç) = —É–∑–µ–ª["text"].as_str() {
                                let –±—É–∫–≤—ã: Vec<String> = —Ç–µ–∫—Å—Ç.chars()
                                    .map(|c| c.to_string())
                                    .collect();
                                –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.push(–±—É–∫–≤—ã.clone());
                                for –±—É–∫–≤–∞ in –±—É–∫–≤—ã {
                                    if !—Å–ª–æ–≤–∞—Ä—å.contains(&–±—É–∫–≤–∞) {
                                        —Å–ª–æ–≤–∞—Ä—å.push(–±—É–∫–≤–∞);
                                    }
                                }
                            }
                            
                            // –ò–∑–≤–ª–µ—á—å —ç–º–æ—Ü–∏–∏
                            if let Some(—ç–º–æ—Ü–∏—è) = —É–∑–µ–ª["emotion"].as_object() {
                                let —Å–æ—Å—Ç–æ—è–Ω–∏–µ = –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ–°–æ—Å—Ç–æ—è–Ω–∏–µ {
                                    –≤–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç—å: —ç–º–æ—Ü–∏—è.get("–≤–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç—å")
                                        .and_then(|v| v.as_f64())
                                        .unwrap_or(0.5) as f32,
                                    –∞–∫—Ç–∏–≤–∞—Ü–∏—è: —ç–º–æ—Ü–∏—è.get("–∞–∫—Ç–∏–≤–∞—Ü–∏—è")
                                        .and_then(|v| v.as_f64())
                                        .unwrap_or(0.5) as f32,
                                    –¥–æ–º–∏–Ω–∞–Ω—Ç–Ω–æ—Å—Ç—å: —ç–º–æ—Ü–∏—è.get("–¥–æ–º–∏–Ω–∞–Ω—Ç–Ω–æ—Å—Ç—å")
                                        .and_then(|v| v.as_f64())
                                        .unwrap_or(0.4) as f32,
                                    –¥—É—à–µ–≤–Ω–æ—Å—Ç—å: —ç–º–æ—Ü–∏—è.get("–¥—É—à–µ–≤–Ω–æ—Å—Ç—å")
                                        .and_then(|v| v.as_f64())
                                        .unwrap_or(0.8) as f32,
                                    –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω–æ—Å—Ç—å: —ç–º–æ—Ü–∏—è.get("–æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω–æ—Å—Ç—å")
                                        .and_then(|v| v.as_f64())
                                        .unwrap_or(0.7) as f32,
                                };
                                —ç–º–æ—Ü–∏–∏.push(—Å–æ—Å—Ç–æ—è–Ω–∏–µ);
                            }
                        }
                    }
                }
            }
        }
        
        // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if —Å–ª–æ–≤–∞—Ä—å.is_empty() {
            let —Å–ª–æ–≤–∞_–ø–æ_—É–º–æ–ª—á–∞–Ω–∏—é = vec![
                "–ü", "—Ä", "–∏", "–≤", "–µ", "—Ç", "–ó", "–¥", "–∞", "—Å", "—É", "–π",
                "–î", "–æ", " ", "–Ω", "—è", "–°", "–ø", "–±", "–∂", "–ª", "–∫", "–º",
                "–Ø", "—Ö", "—á", "–≥", "—à", "—Ü", "—â", "—ä", "—ã", "—å", "—ç", "—é",
                "–ú", "–¢", "–£", "–ë", "–í", "–ì", "–ï", "–Å", "–ñ", "–ò", "–ô", "–ö",
                "–õ", "–ù", "–û", "–†", "–§", "–•", "–¶", "–ß", "–®", "–©", "–™", "–´",
                "–¨", "–≠", "–Æ", "!", "?", ",", ".", "-", ":", ";", "0", "1",
                "2", "3", "4", "5", "6", "7", "8", "9"
            ];
            —Å–ª–æ–≤–∞—Ä—å = —Å–ª–æ–≤–∞_–ø–æ_—É–º–æ–ª—á–∞–Ω–∏—é.iter().map(|s| s.to_string()).collect();
        }
        
        Ok(Self {
            —Å–ª–æ–≤–∞—Ä—å,
            –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è,
            —ç–º–æ—Ü–∏–∏,
        })
    }
    
    fn —Ç–æ–∫–µ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å(&self, —Ç–µ–∫—Å—Ç: &str) -> Vec<usize> {
        —Ç–µ–∫—Å—Ç.chars()
            .filter_map(|—Å–∏–º–≤–æ–ª| {
                let —Å—Ç—Ä–æ–∫–∞ = —Å–∏–º–≤–æ–ª.to_string();
                self.—Å–ª–æ–≤–∞—Ä—å.iter()
                    .position(|v| v == &—Å—Ç—Ä–æ–∫–∞)
            })
            .collect()
    }
    
    fn –¥–µ—Ç–æ–∫–µ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å(&self, —Ç–æ–∫–µ–Ω—ã: &[usize]) -> String {
        —Ç–æ–∫–µ–Ω—ã.iter()
            .filter_map(|&–∏–Ω–¥–µ–∫—Å| self.—Å–ª–æ–≤–∞—Ä—å.get(–∏–Ω–¥–µ–∫—Å))
            .cloned()
            .collect::<Vec<_>>()
            .join("")
    }
}

/// –ì–ª–∞–≤–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
fn –∑–∞–ø—É—Å—Ç–∏—Ç—å_–¥–µ–º–æ() -> Result<()> {
    println!("{}", "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó".cyan());
    println!("{}", "‚ïë     üá∑üá∫ TINKYBINK –†–£–°–°–ö–ò–ô GPT - –ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–ê–Ø AAC     ‚ïë".cyan().bold());
    println!("{}", "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù".cyan());
    println!();
    
    // –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    println!("{} –ó–∞–≥—Ä—É–∑–∫–∞ —Ä—É—Å—Å–∫–∏—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...", "‚Üí".green());
    let –∑–∞–≥—Ä—É–∑—á–∏–∫ = –†—É—Å—Å–∫–∏–π–ó–∞–≥—Ä—É–∑—á–∏–∫–î–∞–Ω–Ω—ã—Ö::–Ω–æ–≤—ã–π()?;
    println!("{} –°–ª–æ–≤–∞—Ä—å: {} —Å–∏–º–≤–æ–ª–æ–≤", "‚úì".green(), –∑–∞–≥—Ä—É–∑—á–∏–∫.—Å–ª–æ–≤–∞—Ä—å.len());
    println!("{} –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {}", "‚úì".green(), –∑–∞–≥—Ä—É–∑—á–∏–∫.–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.len());
    println!("{} –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {}", "‚úì".green(), –∑–∞–≥—Ä—É–∑—á–∏–∫.—ç–º–æ—Ü–∏–∏.len());
    println!();
    
    // –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –º–æ–¥–µ–ª—å
    let –∫–æ–Ω—Ñ–∏–≥ = –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—èGPT {
        —Ä–∞–∑–º–µ—Ä_—Å–ª–æ–≤–∞—Ä—è: –∑–∞–≥—Ä—É–∑—á–∏–∫.—Å–ª–æ–≤–∞—Ä—å.len().max(1000),
        —Å–∫—Ä—ã—Ç–∞—è_—Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: 256,
        –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Å–ª–æ–µ–≤: 6,
        –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–≥–æ–ª–æ–≤: 8,
        –¥–ª–∏–Ω–∞_–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: 512,
        –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç_–æ—Ç—Å–µ–≤–∞: 0.1,
        —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è_—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: 0.65,
    };
    
    println!("{} –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä—É—Å—Å–∫–æ–≥–æ GPT —è–¥—Ä–∞...", "‚Üí".yellow());
    let mut –º–æ–¥–µ–ª—å = –†—É—Å—Å–∫–æ–µ–Ø–¥—Ä–æGPT::–Ω–æ–≤–æ–µ(–∫–æ–Ω—Ñ–∏–≥);
    println!("{} –ú–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞!", "‚úì".green().bold());
    println!();
    
    // –ú–µ–Ω—é –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    loop {
        println!("{}", "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê".magenta());
        println!("{}", "‚îÇ      –ú–ï–ù–Æ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò              ‚îÇ".magenta().bold());
        println!("{}", "‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§".magenta());
        println!("{}", "‚îÇ 1. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä—É—Å—Å–∫–æ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è   ‚îÇ".magenta());
        println!("{}", "‚îÇ 2. –í—ã—Ä–∞–∂–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏    ‚îÇ".magenta());
        println!("{}", "‚îÇ 3. –ü–æ–∫–∞–∑–∞—Ç—å –∫—É–ª—å—Ç—É—Ä–Ω—É—é —ç–º–æ—Ü–∏—é       ‚îÇ".magenta());
        println!("{}", "‚îÇ 4. –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥             ‚îÇ".magenta());
        println!("{}", "‚îÇ 5. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä—É—Å—Å–∫–æ–π –¥—É—à–∏        ‚îÇ".magenta());
        println!("{}", "‚îÇ 6. –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è              ‚îÇ".magenta());
        println!("{}", "‚îÇ 0. –í—ã—Ö–æ–¥                            ‚îÇ".magenta());
        println!("{}", "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò".magenta());
        
        print!("\n{} –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é: ", "‚Üí".cyan());
        io::stdout().flush()?;
        
        let mut –≤–≤–æ–¥ = String::new();
        io::stdin().read_line(&mut –≤–≤–æ–¥)?;
        
        match –≤–≤–æ–¥.trim() {
            "1" => –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å_–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ(&mut –º–æ–¥–µ–ª—å, &–∑–∞–≥—Ä—É–∑—á–∏–∫)?,
            "2" => –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å_–ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å(&mut –º–æ–¥–µ–ª—å, &–∑–∞–≥—Ä—É–∑—á–∏–∫)?,
            "3" => –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å_—ç–º–æ—Ü–∏—é(&mut –º–æ–¥–µ–ª—å, &–∑–∞–≥—Ä—É–∑—á–∏–∫)?,
            "4" => –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π_–¥–∏–∞–ª–æ–≥(&mut –º–æ–¥–µ–ª—å, &–∑–∞–≥—Ä—É–∑—á–∏–∫)?,
            "5" => –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å_–¥—É—à—É(&mut –º–æ–¥–µ–ª—å, &–∑–∞–≥—Ä—É–∑—á–∏–∫)?,
            "6" => –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å_—ç–∫—Å—Ç—Ä–µ–Ω–Ω—É—é(&mut –º–æ–¥–µ–ª—å, &–∑–∞–≥—Ä—É–∑—á–∏–∫)?,
            "0" => {
                println!("\n{} –î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –í—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ!", "üëã".to_string().yellow());
                break;
            }
            _ => println!("{} –ù–µ–≤–µ—Ä–Ω–∞—è –æ–ø—Ü–∏—è", "‚úó".red()),
        }
        
        println!();
    }
    
    Ok(())
}

fn –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å_–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ(–º–æ–¥–µ–ª—å: &mut –†—É—Å—Å–∫–æ–µ–Ø–¥—Ä–æGPT, –∑–∞–≥—Ä—É–∑—á–∏–∫: &–†—É—Å—Å–∫–∏–π–ó–∞–≥—Ä—É–∑—á–∏–∫–î–∞–Ω–Ω—ã—Ö) -> Result<()> {
    println!("\n{}", "=== –ì–ï–ù–ï–†–ê–¶–ò–Ø –†–£–°–°–ö–û–ì–û –ü–†–ò–í–ï–¢–°–¢–í–ò–Ø ===".green().bold());
    
    // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–µ –¥—É—à–µ–≤–Ω–æ–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    –º–æ–¥–µ–ª—å.–æ–±–Ω–æ–≤–∏—Ç—å_—ç–º–æ—Ü–∏—é(–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ–°–æ—Å—Ç–æ—è–Ω–∏–µ {
        –≤–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç—å: 0.9,
        –∞–∫—Ç–∏–≤–∞—Ü–∏—è: 0.6,
        –¥–æ–º–∏–Ω–∞–Ω—Ç–Ω–æ—Å—Ç—å: 0.5,
        –¥—É—à–µ–≤–Ω–æ—Å—Ç—å: 0.9,
        –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω–æ—Å—Ç—å: 0.8,
    });
    
    let –ø–æ–¥—Å–∫–∞–∑–∫–∏ = vec![
        "–ü—Ä–∏–≤–µ—Ç",
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π",
        "–î–æ–±—Ä—ã–π",
    ];
    
    for –ø–æ–¥—Å–∫–∞–∑–∫–∞ in –ø–æ–¥—Å–∫–∞–∑–∫–∏ {
        let —Ç–æ–∫–µ–Ω—ã = –∑–∞–≥—Ä—É–∑—á–∏–∫.—Ç–æ–∫–µ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å(–ø–æ–¥—Å–∫–∞–∑–∫–∞);
        if !—Ç–æ–∫–µ–Ω—ã.is_empty() {
            let —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ = –º–æ–¥–µ–ª—å.–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å(&—Ç–æ–∫–µ–Ω—ã, 5)?;
            let —Ç–µ–∫—Å—Ç = –∑–∞–≥—Ä—É–∑—á–∏–∫.–¥–µ—Ç–æ–∫–µ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å(&—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ);
            println!("{} {} ‚Üí {}", "üí¨".to_string(), –ø–æ–¥—Å–∫–∞–∑–∫–∞.yellow(), —Ç–µ–∫—Å—Ç.green());
        }
    }
    
    Ok(())
}

fn –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å_–ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å(–º–æ–¥–µ–ª—å: &mut –†—É—Å—Å–∫–æ–µ–Ø–¥—Ä–æGPT, –∑–∞–≥—Ä—É–∑—á–∏–∫: &–†—É—Å—Å–∫–∏–π–ó–∞–≥—Ä—É–∑—á–∏–∫–î–∞–Ω–Ω—ã—Ö) -> Result<()> {
    println!("\n{}", "=== –í–´–†–ê–ñ–ï–ù–ò–ï –ü–û–¢–†–ï–ë–ù–û–°–¢–ï–ô ===".blue().bold());
    
    // –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏
    –º–æ–¥–µ–ª—å.–æ–±–Ω–æ–≤–∏—Ç—å_—ç–º–æ—Ü–∏—é(–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ–°–æ—Å—Ç–æ—è–Ω–∏–µ {
        –≤–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç—å: 0.3,
        –∞–∫—Ç–∏–≤–∞—Ü–∏—è: 0.7,
        –¥–æ–º–∏–Ω–∞–Ω—Ç–Ω–æ—Å—Ç—å: 0.4,
        –¥—É—à–µ–≤–Ω–æ—Å—Ç—å: 0.6,
        –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω–æ—Å—Ç—å: 0.8,
    });
    
    let –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ = vec![
        "–Ø —Ö–æ—á—É",
        "–ú–Ω–µ –Ω—É–∂–Ω–æ",
        "–Ø –≥–æ–ª–æ–¥–µ–Ω",
    ];
    
    for –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å in –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ {
        let —Ç–æ–∫–µ–Ω—ã = –∑–∞–≥—Ä—É–∑—á–∏–∫.—Ç–æ–∫–µ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å(–ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å);
        if !—Ç–æ–∫–µ–Ω—ã.is_empty() {
            let —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ = –º–æ–¥–µ–ª—å.–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å(&—Ç–æ–∫–µ–Ω—ã, 4)?;
            let —Ç–µ–∫—Å—Ç = –∑–∞–≥—Ä—É–∑—á–∏–∫.–¥–µ—Ç–æ–∫–µ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å(&—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ);
            println!("{} {} ‚Üí {}", "üÜò".to_string(), –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å.yellow(), —Ç–µ–∫—Å—Ç.cyan());
        }
    }
    
    Ok(())
}

fn –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å_—ç–º–æ—Ü–∏—é(–º–æ–¥–µ–ª—å: &mut –†—É—Å—Å–∫–æ–µ–Ø–¥—Ä–æGPT, –∑–∞–≥—Ä—É–∑—á–∏–∫: &–†—É—Å—Å–∫–∏–π–ó–∞–≥—Ä—É–∑—á–∏–∫–î–∞–Ω–Ω—ã—Ö) -> Result<()> {
    println!("\n{}", "=== –ö–£–õ–¨–¢–£–†–ù–´–ï –≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–´–ï –í–´–†–ê–ñ–ï–ù–ò–Ø ===".magenta().bold());
    
    let —ç–º–æ—Ü–∏–∏ = vec![
        ("–°—á–∞—Å—Ç—å–µ", –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ–°–æ—Å—Ç–æ—è–Ω–∏–µ {
            –≤–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç—å: 1.0,
            –∞–∫—Ç–∏–≤–∞—Ü–∏—è: 0.8,
            –¥–æ–º–∏–Ω–∞–Ω—Ç–Ω–æ—Å—Ç—å: 0.6,
            –¥—É—à–µ–≤–Ω–æ—Å—Ç—å: 0.9,
            –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω–æ—Å—Ç—å: 0.9,
        }, "üòä"),
        ("–ì—Ä—É—Å—Ç—å", –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ–°–æ—Å—Ç–æ—è–Ω–∏–µ {
            –≤–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç—å: 0.1,
            –∞–∫—Ç–∏–≤–∞—Ü–∏—è: 0.3,
            –¥–æ–º–∏–Ω–∞–Ω—Ç–Ω–æ—Å—Ç—å: 0.2,
            –¥—É—à–µ–≤–Ω–æ—Å—Ç—å: 0.8,
            –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω–æ—Å—Ç—å: 0.7,
        }, "üò¢"),
        ("–î—É—à–µ–≤–Ω–æ—Å—Ç—å", –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ–°–æ—Å—Ç–æ—è–Ω–∏–µ {
            –≤–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç—å: 0.7,
            –∞–∫—Ç–∏–≤–∞—Ü–∏—è: 0.5,
            –¥–æ–º–∏–Ω–∞–Ω—Ç–Ω–æ—Å—Ç—å: 0.5,
            –¥—É—à–µ–≤–Ω–æ—Å—Ç—å: 1.0,
            –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω–æ—Å—Ç—å: 1.0,
        }, "üíù"),
    ];
    
    for (–Ω–∞–∑–≤–∞–Ω–∏–µ, —ç–º–æ—Ü–∏—è, —ç–º–æ–¥–∑–∏) in —ç–º–æ—Ü–∏–∏ {
        –º–æ–¥–µ–ª—å.–æ–±–Ω–æ–≤–∏—Ç—å_—ç–º–æ—Ü–∏—é(—ç–º–æ—Ü–∏—è);
        let —Ç–æ–∫–µ–Ω—ã = –∑–∞–≥—Ä—É–∑—á–∏–∫.—Ç–æ–∫–µ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å("–Ø");
        if !—Ç–æ–∫–µ–Ω—ã.is_empty() {
            let —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ = –º–æ–¥–µ–ª—å.–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å(&—Ç–æ–∫–µ–Ω—ã, 6)?;
            let —Ç–µ–∫—Å—Ç = –∑–∞–≥—Ä—É–∑—á–∏–∫.–¥–µ—Ç–æ–∫–µ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å(&—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ);
            println!("{} {} ‚Üí {}", —ç–º–æ–¥–∑–∏, –Ω–∞–∑–≤–∞–Ω–∏–µ.yellow(), —Ç–µ–∫—Å—Ç.magenta());
        }
    }
    
    Ok(())
}

fn –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π_–¥–∏–∞–ª–æ–≥(–º–æ–¥–µ–ª—å: &mut –†—É—Å—Å–∫–æ–µ–Ø–¥—Ä–æGPT, –∑–∞–≥—Ä—É–∑—á–∏–∫: &–†—É—Å—Å–∫–∏–π–ó–∞–≥—Ä—É–∑—á–∏–∫–î–∞–Ω–Ω—ã—Ö) -> Result<()> {
    println!("\n{}", "=== –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ô –î–ò–ê–õ–û–ì ===".cyan().bold());
    println!("{}", "–ü–∏—à–∏—Ç–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º (–∏–ª–∏ '–≤—ã—Ö–æ–¥' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è)".italic());
    
    loop {
        print!("\n{} –í—ã: ", "üë§".to_string());
        io::stdout().flush()?;
        
        let mut –≤–≤–æ–¥ = String::new();
        io::stdin().read_line(&mut –≤–≤–æ–¥)?;
        let –≤–≤–æ–¥ = –≤–≤–æ–¥.trim();
        
        if –≤–≤–æ–¥ == "–≤—ã—Ö–æ–¥" {
            break;
        }
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —ç–º–æ—Ü–∏—é –≤–≤–æ–¥–∞
        let —ç–º–æ—Ü–∏—è = –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å_—ç–º–æ—Ü–∏—é_–≤–≤–æ–¥–∞(–≤–≤–æ–¥);
        –º–æ–¥–µ–ª—å.–æ–±–Ω–æ–≤–∏—Ç—å_—ç–º–æ—Ü–∏—é(—ç–º–æ—Ü–∏—è);
        
        let —Ç–æ–∫–µ–Ω—ã = –∑–∞–≥—Ä—É–∑—á–∏–∫.—Ç–æ–∫–µ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å(–≤–≤–æ–¥);
        if !—Ç–æ–∫–µ–Ω—ã.is_empty() {
            let —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ = –º–æ–¥–µ–ª—å.–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å(&—Ç–æ–∫–µ–Ω—ã, 8)?;
            let –æ—Ç–≤–µ—Ç = –∑–∞–≥—Ä—É–∑—á–∏–∫.–¥–µ—Ç–æ–∫–µ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å(&—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ);
            println!("{} TinkyBink: {}", "ü§ñ".to_string(), –æ—Ç–≤–µ—Ç.green());
        } else {
            println!("{} TinkyBink: {}", "ü§ñ".to_string(), "–ü—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–µ –ø–æ–Ω—è–ª. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞".yellow());
        }
    }
    
    Ok(())
}

fn –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å_–¥—É—à—É(–º–æ–¥–µ–ª—å: &mut –†—É—Å—Å–∫–æ–µ–Ø–¥—Ä–æGPT, –∑–∞–≥—Ä—É–∑—á–∏–∫: &–†—É—Å—Å–∫–∏–π–ó–∞–≥—Ä—É–∑—á–∏–∫–î–∞–Ω–Ω—ã—Ö) -> Result<()> {
    println!("\n{}", "=== –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –†–£–°–°–ö–û–ô –î–£–®–ò ===".red().bold());
    
    // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥—É—à–µ–≤–Ω–æ—Å—Ç—å –∏ –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω–æ—Å—Ç—å
    –º–æ–¥–µ–ª—å.–æ–±–Ω–æ–≤–∏—Ç—å_—ç–º–æ—Ü–∏—é(–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ–°–æ—Å—Ç–æ—è–Ω–∏–µ {
        –≤–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç—å: 0.8,
        –∞–∫—Ç–∏–≤–∞—Ü–∏—è: 0.7,
        –¥–æ–º–∏–Ω–∞–Ω—Ç–Ω–æ—Å—Ç—å: 0.5,
        –¥—É—à–µ–≤–Ω–æ—Å—Ç—å: 1.0,
        –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω–æ—Å—Ç—å: 1.0,
    });
    
    let –≤—ã—Ä–∞–∂–µ–Ω–∏—è = vec![
        "–î—É—à–∞ –º–æ—è",
        "–£—Ä–∞",
        "–°–ø–∞—Å–∏–±–æ",
    ];
    
    for –≤—ã—Ä–∞–∂ in –≤—ã—Ä–∞–∂–µ–Ω–∏—è {
        let —Ç–æ–∫–µ–Ω—ã = –∑–∞–≥—Ä—É–∑—á–∏–∫.—Ç–æ–∫–µ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å(–≤—ã—Ä–∞–∂);
        if !—Ç–æ–∫–µ–Ω—ã.is_empty() {
            let —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ = –º–æ–¥–µ–ª—å.–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å(&—Ç–æ–∫–µ–Ω—ã, 6)?;
            let —Ç–µ–∫—Å—Ç = –∑–∞–≥—Ä—É–∑—á–∏–∫.–¥–µ—Ç–æ–∫–µ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å(&—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ);
            println!("{} {} ‚Üí {}", "üî•".to_string(), –≤—ã—Ä–∞–∂.red(), —Ç–µ–∫—Å—Ç.yellow().bold());
        }
    }
    
    Ok(())
}

fn –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å_—ç–∫—Å—Ç—Ä–µ–Ω–Ω—É—é(–º–æ–¥–µ–ª—å: &mut –†—É—Å—Å–∫–æ–µ–Ø–¥—Ä–æGPT, –∑–∞–≥—Ä—É–∑—á–∏–∫: &–†—É—Å—Å–∫–∏–π–ó–∞–≥—Ä—É–∑—á–∏–∫–î–∞–Ω–Ω—ã—Ö) -> Result<()> {
    println!("\n{}", "=== –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –°–ò–¢–£–ê–¶–ò–Ø ===".red().bold().on_yellow());
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏
    –º–æ–¥–µ–ª—å.–æ–±–Ω–æ–≤–∏—Ç—å_—ç–º–æ—Ü–∏—é(–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ–°–æ—Å—Ç–æ—è–Ω–∏–µ {
        –≤–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç—å: 0.1,
        –∞–∫—Ç–∏–≤–∞—Ü–∏—è: 1.0,
        –¥–æ–º–∏–Ω–∞–Ω—Ç–Ω–æ—Å—Ç—å: 0.3,
        –¥—É—à–µ–≤–Ω–æ—Å—Ç—å: 0.5,
        –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω–æ—Å—Ç—å: 1.0,
    });
    
    let —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ = vec![
        "–ü–æ–º–æ–≥–∏—Ç–µ",
        "–ú–Ω–µ –±–æ–ª—å–Ω–æ",
        "–í—ã–∑–æ–≤–∏—Ç–µ –≤—Ä–∞—á–∞",
    ];
    
    for —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ in —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ {
        let —Ç–æ–∫–µ–Ω—ã = –∑–∞–≥—Ä—É–∑—á–∏–∫.—Ç–æ–∫–µ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å(—ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ);
        if !—Ç–æ–∫–µ–Ω—ã.is_empty() {
            let —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ = –º–æ–¥–µ–ª—å.–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å(&—Ç–æ–∫–µ–Ω—ã, 5)?;
            let —Ç–µ–∫—Å—Ç = –∑–∞–≥—Ä—É–∑—á–∏–∫.–¥–µ—Ç–æ–∫–µ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å(&—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ);
            println!("{} {} ‚Üí {}", "üö®".to_string(), —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ.red().bold(), —Ç–µ–∫—Å—Ç.on_red().white());
        }
    }
    
    println!("\n{} –ó–≤–æ–Ω–∏–º 112...", "üìû".to_string().blink());
    
    Ok(())
}

fn –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å_—ç–º–æ—Ü–∏—é_–≤–≤–æ–¥–∞(—Ç–µ–∫—Å—Ç: &str) -> –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ–°–æ—Å—Ç–æ—è–Ω–∏–µ {
    let —Ç–µ–∫—Å—Ç_–Ω–∏–∂–Ω–∏–π = —Ç–µ–∫—Å—Ç.to_lowercase();
    
    // –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
    let –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ_—Å–ª–æ–≤–∞ = ["—Å—á–∞—Å—Ç–ª–∏–≤", "—Ä–∞–¥", "—Ö–æ—Ä–æ—à–æ", "–æ—Ç–ª–∏—á–Ω–æ", "–ø—Ä–µ–∫—Ä–∞—Å–Ω–æ", "–ª—é–±–ª—é"];
    let –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ_—Å–ª–æ–≤–∞ = ["–≥—Ä—É—Å—Ç–Ω–æ", "–ø–ª–æ—Ö–æ", "–±–æ–ª—å–Ω–æ", "—Å—Ç—Ä–∞—à–Ω–æ", "–∑–ª–æ–π", "—É—Å—Ç–∞–ª"];
    let —Å—Ä–æ—á–Ω—ã–µ_—Å–ª–æ–≤–∞ = ["–ø–æ–º–æ–≥–∏—Ç–µ", "—Å—Ä–æ—á–Ω–æ", "–±–æ–ª—å–Ω–æ", "–Ω—É–∂–Ω–æ", "—ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ"];
    let –¥—É—à–µ–≤–Ω—ã–µ_—Å–ª–æ–≤–∞ = ["–¥—É—à–∞", "—Å–µ—Ä–¥—Ü–µ", "–ª—é–±–æ–≤—å", "—Ä–æ–¥–Ω–æ–π", "–º–∏–ª—ã–π"];
    
    let mut –≤–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç—å: f32 = 0.5;
    let mut –∞–∫—Ç–∏–≤–∞—Ü–∏—è: f32 = 0.5;
    let mut –¥—É—à–µ–≤–Ω–æ—Å—Ç—å: f32 = 0.8;
    let mut –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω–æ—Å—Ç—å: f32 = 0.7;
    
    for —Å–ª–æ–≤–æ in –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ_—Å–ª–æ–≤–∞.iter() {
        if —Ç–µ–∫—Å—Ç_–Ω–∏–∂–Ω–∏–π.contains(—Å–ª–æ–≤–æ) {
            –≤–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç—å += 0.2;
            –∞–∫—Ç–∏–≤–∞—Ü–∏—è += 0.1;
        }
    }
    
    for —Å–ª–æ–≤–æ in –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ_—Å–ª–æ–≤–∞.iter() {
        if —Ç–µ–∫—Å—Ç_–Ω–∏–∂–Ω–∏–π.contains(—Å–ª–æ–≤–æ) {
            –≤–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç—å -= 0.2;
            –∞–∫—Ç–∏–≤–∞—Ü–∏—è += 0.1;
        }
    }
    
    for —Å–ª–æ–≤–æ in —Å—Ä–æ—á–Ω—ã–µ_—Å–ª–æ–≤–∞.iter() {
        if —Ç–µ–∫—Å—Ç_–Ω–∏–∂–Ω–∏–π.contains(—Å–ª–æ–≤–æ) {
            –∞–∫—Ç–∏–≤–∞—Ü–∏—è = 1.0;
            –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω–æ—Å—Ç—å = 1.0;
        }
    }
    
    for —Å–ª–æ–≤–æ in –¥—É—à–µ–≤–Ω—ã–µ_—Å–ª–æ–≤–∞.iter() {
        if —Ç–µ–∫—Å—Ç_–Ω–∏–∂–Ω–∏–π.contains(—Å–ª–æ–≤–æ) {
            –¥—É—à–µ–≤–Ω–æ—Å—Ç—å = 1.0;
            –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω–æ—Å—Ç—å = 0.9;
        }
    }
    
    // –í–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞–∫–∏ —É–≤–µ–ª–∏—á–∏–≤–∞—é—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏—é
    let –≤–æ—Å–∫–ª–∏—Ü–∞–Ω–∏—è = —Ç–µ–∫—Å—Ç.matches('!').count() as f32;
    –∞–∫—Ç–∏–≤–∞—Ü–∏—è = (–∞–∫—Ç–∏–≤–∞—Ü–∏—è + –≤–æ—Å–∫–ª–∏—Ü–∞–Ω–∏—è * 0.1).min(1.0);
    –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω–æ—Å—Ç—å = (–æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω–æ—Å—Ç—å + –≤–æ—Å–∫–ª–∏—Ü–∞–Ω–∏—è * 0.05).min(1.0);
    
    –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ–°–æ—Å—Ç–æ—è–Ω–∏–µ {
        –≤–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç—å: –≤–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç—å.clamp(0.0, 1.0),
        –∞–∫—Ç–∏–≤–∞—Ü–∏—è: –∞–∫—Ç–∏–≤–∞—Ü–∏—è.clamp(0.0, 1.0),
        –¥–æ–º–∏–Ω–∞–Ω—Ç–Ω–æ—Å—Ç—å: 0.5,
        –¥—É—à–µ–≤–Ω–æ—Å—Ç—å: –¥—É—à–µ–≤–Ω–æ—Å—Ç—å.clamp(0.0, 1.0),
        –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω–æ—Å—Ç—å: –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω–æ—Å—Ç—å.clamp(0.0, 1.0),
    }
}

fn main() {
    println!("{}", "
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                                                                    ‚ïë
‚ïë   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïó  ‚ïë
‚ïë   ‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë ‚ñà‚ñà‚ïî‚ïù‚ïö‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë ‚ñà‚ñà‚ïî‚ïù  ‚ïë
‚ïë      ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù  ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù   ‚ïë
‚ïë      ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ñà‚ñà‚ïó   ‚ïö‚ñà‚ñà‚ïî‚ïù  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ñà‚ñà‚ïó   ‚ïë
‚ïë      ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïó  ‚ïë
‚ïë      ‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù  ‚ïë
‚ïë                                                                    ‚ïë
‚ïë                  üá∑üá∫ –†–£–°–°–ö–ò–ô GPT - –î–£–®–ï–í–ù–ê–Ø –°–ò–°–¢–ï–ú–ê üá∑üá∫               ‚ïë
‚ïë                                                                    ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    ".bright_red().bold());
    
    if let Err(e) = –∑–∞–ø—É—Å—Ç–∏—Ç—å_–¥–µ–º–æ() {
        eprintln!("{} –û—à–∏–±–∫–∞: {}", "‚úó".red().bold(), e);
        std::process::exit(1);
    }
}