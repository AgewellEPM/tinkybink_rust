//! üß†üí• GPT-–ò–Ω—Ñ—É–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –Ø–¥—Ä–æ –¥–ª—è –ú–∞–ª—ã—Ö –ú–æ–¥–µ–ª–µ–π - –†–£–°–°–ö–ê–Ø –í–ï–†–°–ò–Ø
//! 
//! –ü—Ä–∏–¥–∞–π—Ç–µ GPT-–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –õ–Æ–ë–û–ô –º–∞–ª–æ–π –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑:
//! - –ö–∞—É–∑–∞–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫ –≤–Ω–∏–º–∞–Ω–∏—è
//! - –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
//! - –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –æ–∫–Ω–∞
//! - –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –∫–∞—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

use anyhow::Result;
use std::collections::VecDeque;
use serde::{Serialize, Deserialize};

/// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä—É—Å—Å–∫–æ–π GPT –º–æ–¥–µ–ª–∏
#[derive(Clone, Debug, Serialize, Deserialize)]
pub struct –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—èGPT {
    pub —Ä–∞–∑–º–µ—Ä_—Å–ª–æ–≤–∞—Ä—è: usize,
    pub —Å–∫—Ä—ã—Ç–∞—è_—Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: usize,
    pub –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Å–ª–æ–µ–≤: usize,
    pub –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–≥–æ–ª–æ–≤: usize,
    pub –¥–ª–∏–Ω–∞_–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: usize,
    pub –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç_–æ—Ç—Å–µ–≤–∞: f32,
    pub —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è_—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: f32,
}

impl Default for –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—èGPT {
    fn default() -> Self {
        Self {
            —Ä–∞–∑–º–µ—Ä_—Å–ª–æ–≤–∞—Ä—è: 70000,  // –ë–æ–ª—å—à–µ –¥–ª—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
            —Å–∫—Ä—ã—Ç–∞—è_—Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: 768,
            –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Å–ª–æ–µ–≤: 12,
            –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–≥–æ–ª–æ–≤: 12,
            –¥–ª–∏–Ω–∞_–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: 1024,
            –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç_–æ—Ç—Å–µ–≤–∞: 0.1,
            —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è_—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: 0.65,
        }
    }
}

/// –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å —Ä—É—Å—Å–∫–æ–π –¥—É—à–æ–π
#[derive(Clone, Debug, Serialize, Deserialize)]
pub struct –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ–°–æ—Å—Ç–æ—è–Ω–∏–µ {
    pub –≤–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç—å: f32,       // -1.0 (–Ω–µ–≥–∞—Ç–∏–≤) –¥–æ 1.0 (–ø–æ–∑–∏—Ç–∏–≤)
    pub –∞–∫—Ç–∏–≤–∞—Ü–∏—è: f32,          // 0.0 (—Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ) –¥–æ 1.0 (–≤–æ–∑–±—É–∂–¥–µ–Ω–∏–µ)
    pub –¥–æ–º–∏–Ω–∞–Ω—Ç–Ω–æ—Å—Ç—å: f32,      // 0.0 (–ø–æ–∫–æ—Ä–Ω–æ—Å—Ç—å) –¥–æ 1.0 (–¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ)
    pub –¥—É—à–µ–≤–Ω–æ—Å—Ç—å: f32,         // 0.0 (—Ö–æ–ª–æ–¥–Ω–æ—Å—Ç—å) –¥–æ 1.0 (—Ç–µ–ø–ª–æ—Ç–∞) - —Ä—É—Å—Å–∫–∞—è —á–µ—Ä—Ç–∞
    pub –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω–æ—Å—Ç—å: f32,      // 0.0 (–∑–∞–∫—Ä—ã—Ç–æ—Å—Ç—å) –¥–æ 1.0 (–æ—Ç–∫—Ä—ã—Ç–æ—Å—Ç—å) - —Ä—É—Å—Å–∫–∞—è —á–µ—Ä—Ç–∞
}

impl Default for –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ–°–æ—Å—Ç–æ—è–Ω–∏–µ {
    fn default() -> Self {
        Self {
            –≤–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç—å: 0.5,
            –∞–∫—Ç–∏–≤–∞—Ü–∏—è: 0.5,
            –¥–æ–º–∏–Ω–∞–Ω—Ç–Ω–æ—Å—Ç—å: 0.4,
            –¥—É—à–µ–≤–Ω–æ—Å—Ç—å: 0.8,      // –†—É—Å—Å–∫–∏–µ –±–æ–ª–µ–µ –¥—É—à–µ–≤–Ω—ã–µ
            –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω–æ—Å—Ç—å: 0.7,   // –°–∫–ª–æ–Ω–Ω–æ—Å—Ç—å –∫ –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω–æ—Å—Ç–∏
        }
    }
}

/// –ú–µ—Ö–∞–Ω–∏–∑–º –∫–∞—É–∑–∞–ª—å–Ω–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è
pub struct –ú–µ—Ö–∞–Ω–∏–∑–º–í–Ω–∏–º–∞–Ω–∏—è {
    –≤–µ—Å–∞_q: Vec<Vec<f32>>,
    –≤–µ—Å–∞_k: Vec<Vec<f32>>,
    –≤–µ—Å–∞_v: Vec<Vec<f32>>,
    –≤–µ—Å–∞_–≤—ã—Ö–æ–¥–∞: Vec<Vec<f32>>,
    –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–≥–æ–ª–æ–≤: usize,
    —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å_–≥–æ–ª–æ–≤—ã: usize,
}

impl –ú–µ—Ö–∞–Ω–∏–∑–º–í–Ω–∏–º–∞–Ω–∏—è {
    pub fn –Ω–æ–≤—ã–π(—Å–∫—Ä—ã—Ç–∞—è_—Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: usize, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–≥–æ–ª–æ–≤: usize) -> Self {
        let —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å_–≥–æ–ª–æ–≤—ã = —Å–∫—Ä—ã—Ç–∞—è_—Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å / –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–≥–æ–ª–æ–≤;
        
        Self {
            –≤–µ—Å–∞_q: Self::–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å_–≤–µ—Å–∞(—Å–∫—Ä—ã—Ç–∞—è_—Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å, —Å–∫—Ä—ã—Ç–∞—è_—Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å),
            –≤–µ—Å–∞_k: Self::–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å_–≤–µ—Å–∞(—Å–∫—Ä—ã—Ç–∞—è_—Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å, —Å–∫—Ä—ã—Ç–∞—è_—Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å),
            –≤–µ—Å–∞_v: Self::–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å_–≤–µ—Å–∞(—Å–∫—Ä—ã—Ç–∞—è_—Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å, —Å–∫—Ä—ã—Ç–∞—è_—Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å),
            –≤–µ—Å–∞_–≤—ã—Ö–æ–¥–∞: Self::–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å_–≤–µ—Å–∞(—Å–∫—Ä—ã—Ç–∞—è_—Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å, —Å–∫—Ä—ã—Ç–∞—è_—Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å),
            –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–≥–æ–ª–æ–≤,
            —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å_–≥–æ–ª–æ–≤—ã,
        }
    }
    
    fn –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å_–≤–µ—Å–∞(—Å—Ç—Ä–æ–∫–∏: usize, —Å—Ç–æ–ª–±—Ü—ã: usize) -> Vec<Vec<f32>> {
        let –º–∞—Å—à—Ç–∞–± = (2.0 / —Å—Ç—Ä–æ–∫–∏ as f32).sqrt();
        (0..—Å—Ç—Ä–æ–∫–∏)
            .map(|_| {
                (0..—Å—Ç–æ–ª–±—Ü—ã)
                    .map(|_| rand::random::<f32>() * –º–∞—Å—à—Ç–∞–± - –º–∞—Å—à—Ç–∞–± / 2.0)
                    .collect()
            })
            .collect()
    }
    
    pub fn –≤–ø–µ—Ä–µ–¥(&self, x: &[Vec<f32>], –º–∞—Å–∫–∞: Option<&[Vec<bool>]>) -> Vec<Vec<f32>> {
        let –¥–ª–∏–Ω–∞_–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ = x.len();
        let —Å–∫—Ä—ã—Ç–∞—è_—Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å = x[0].len();
        
        // –ü—Ä–æ–µ—Ü–∏—Ä–æ–≤–∞—Ç—å –≤ Q, K, V
        let q = self.–ø—Ä–æ–µ—Ü–∏—Ä–æ–≤–∞—Ç—å(&x, &self.–≤–µ—Å–∞_q);
        let k = self.–ø—Ä–æ–µ—Ü–∏—Ä–æ–≤–∞—Ç—å(&x, &self.–≤–µ—Å–∞_k);
        let v = self.–ø—Ä–æ–µ—Ü–∏—Ä–æ–≤–∞—Ç—å(&x, &self.–≤–µ—Å–∞_v);
        
        // –ü–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –º–Ω–æ–≥–æ–≥–æ–ª–æ–≤–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è
        let q_–≥–æ–ª–æ–≤—ã = self.–ø–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å_–≥–æ–ª–æ–≤—ã(&q);
        let k_–≥–æ–ª–æ–≤—ã = self.–ø–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å_–≥–æ–ª–æ–≤—ã(&k);
        let _v_–≥–æ–ª–æ–≤—ã = self.–ø–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å_–≥–æ–ª–æ–≤—ã(&v);
        
        // –í—ã—á–∏—Å–ª–∏—Ç—å –æ—Ü–µ–Ω–∫–∏ –≤–Ω–∏–º–∞–Ω–∏—è
        let mut –æ—Ü–µ–Ω–∫–∏ = vec![vec![0.0; –¥–ª–∏–Ω–∞_–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏]; –¥–ª–∏–Ω–∞_–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏];
        let –º–∞—Å—à—Ç–∞–± = (self.—Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å_–≥–æ–ª–æ–≤—ã as f32).sqrt();
        
        for i in 0..–¥–ª–∏–Ω–∞_–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ {
            for j in 0..–¥–ª–∏–Ω–∞_–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ {
                // –ö–∞—É–∑–∞–ª—å–Ω–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ: –Ω–µ —Å–º–æ—Ç—Ä–µ—Ç—å –≤ –±—É–¥—É—â–µ–µ
                if j > i {
                    –æ—Ü–µ–Ω–∫–∏[i][j] = -1e10;
                } else {
                    let mut –æ—Ü–µ–Ω–∫–∞ = 0.0;
                    for h in 0..self.–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–≥–æ–ª–æ–≤ {
                        for d in 0..self.—Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å_–≥–æ–ª–æ–≤—ã {
                            –æ—Ü–µ–Ω–∫–∞ += q_–≥–æ–ª–æ–≤—ã[h][i][d] * k_–≥–æ–ª–æ–≤—ã[h][j][d];
                        }
                    }
                    –æ—Ü–µ–Ω–∫–∏[i][j] = –æ—Ü–µ–Ω–∫–∞ / –º–∞—Å—à—Ç–∞–±;
                }
            }
        }
        
        // –ü—Ä–∏–º–µ–Ω–∏—Ç—å –º–∞—Å–∫—É –µ—Å–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞
        if let Some(–º) = –º–∞—Å–∫–∞ {
            for i in 0..–¥–ª–∏–Ω–∞_–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ {
                for j in 0..–¥–ª–∏–Ω–∞_–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ {
                    if !–º[i][j] {
                        –æ—Ü–µ–Ω–∫–∏[i][j] = -1e10;
                    }
                }
            }
        }
        
        // Softmax
        let –≤–µ—Å–∞_–≤–Ω–∏–º–∞–Ω–∏—è = self.softmax(&–æ—Ü–µ–Ω–∫–∏);
        
        // –ü—Ä–∏–º–µ–Ω–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º
        let mut –≤—ã—Ö–æ–¥ = vec![vec![0.0; —Å–∫—Ä—ã—Ç–∞—è_—Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å]; –¥–ª–∏–Ω–∞_–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏];
        for i in 0..–¥–ª–∏–Ω–∞_–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ {
            for j in 0..–¥–ª–∏–Ω–∞_–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ {
                let –≤–µ—Å = –≤–µ—Å–∞_–≤–Ω–∏–º–∞–Ω–∏—è[i][j];
                for d in 0..—Å–∫—Ä—ã—Ç–∞—è_—Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å {
                    –≤—ã—Ö–æ–¥[i][d] += –≤–µ—Å * v[j][d];
                }
            }
        }
        
        // –í—ã—Ö–æ–¥–Ω–∞—è –ø—Ä–æ–µ–∫—Ü–∏—è
        self.–ø—Ä–æ–µ—Ü–∏—Ä–æ–≤–∞—Ç—å(&–≤—ã—Ö–æ–¥, &self.–≤–µ—Å–∞_–≤—ã—Ö–æ–¥–∞)
    }
    
    fn –ø—Ä–æ–µ—Ü–∏—Ä–æ–≤–∞—Ç—å(&self, x: &[Vec<f32>], –≤–µ—Å–∞: &[Vec<f32>]) -> Vec<Vec<f32>> {
        x.iter()
            .map(|—Å—Ç—Ä–æ–∫–∞| {
                –≤–µ—Å–∞.iter()
                    .map(|—Å—Ç—Ä–æ–∫–∞_–≤–µ—Å–æ–≤| {
                        —Å—Ç—Ä–æ–∫–∞.iter()
                            .zip(—Å—Ç—Ä–æ–∫–∞_–≤–µ—Å–æ–≤.iter())
                            .map(|(a, b)| a * b)
                            .sum()
                    })
                    .collect()
            })
            .collect()
    }
    
    fn –ø–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å_–≥–æ–ª–æ–≤—ã(&self, x: &[Vec<f32>]) -> Vec<Vec<Vec<f32>>> {
        let –¥–ª–∏–Ω–∞_–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ = x.len();
        let mut –≥–æ–ª–æ–≤—ã = vec![vec![vec![0.0; self.—Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å_–≥–æ–ª–æ–≤—ã]; –¥–ª–∏–Ω–∞_–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏]; self.–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–≥–æ–ª–æ–≤];
        
        for i in 0..–¥–ª–∏–Ω–∞_–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ {
            for h in 0..self.–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–≥–æ–ª–æ–≤ {
                for d in 0..self.—Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å_–≥–æ–ª–æ–≤—ã {
                    –≥–æ–ª–æ–≤—ã[h][i][d] = x[i][h * self.—Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å_–≥–æ–ª–æ–≤—ã + d];
                }
            }
        }
        
        –≥–æ–ª–æ–≤—ã
    }
    
    fn softmax(&self, x: &[Vec<f32>]) -> Vec<Vec<f32>> {
        x.iter()
            .map(|—Å—Ç—Ä–æ–∫–∞| {
                let –º–∞–∫—Å = —Å—Ç—Ä–æ–∫–∞.iter().cloned().fold(f32::NEG_INFINITY, f32::max);
                let —Å—É–º–º–∞_exp: f32 = —Å—Ç—Ä–æ–∫–∞.iter().map(|v| (v - –º–∞–∫—Å).exp()).sum();
                —Å—Ç—Ä–æ–∫–∞.iter().map(|v| (v - –º–∞–∫—Å).exp() / —Å—É–º–º–∞_exp).collect()
            })
            .collect()
    }
}

/// –ë–ª–æ–∫ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä–∞
pub struct –ë–ª–æ–∫–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä–∞ {
    –≤–Ω–∏–º–∞–Ω–∏–µ: –ú–µ—Ö–∞–Ω–∏–∑–º–í–Ω–∏–º–∞–Ω–∏—è,
    –º–ª–ø: –ù–µ–π—Ä–æ–Ω–Ω–∞—è–°–µ—Ç—å,
    –Ω–æ—Ä–º1: –°–ª–æ–π–Ω–∞—è–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è,
    –Ω–æ—Ä–º2: –°–ª–æ–π–Ω–∞—è–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è,
}

impl –ë–ª–æ–∫–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä–∞ {
    pub fn –Ω–æ–≤—ã–π(–∫–æ–Ω—Ñ–∏–≥: &–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—èGPT) -> Self {
        Self {
            –≤–Ω–∏–º–∞–Ω–∏–µ: –ú–µ—Ö–∞–Ω–∏–∑–º–í–Ω–∏–º–∞–Ω–∏—è::–Ω–æ–≤—ã–π(–∫–æ–Ω—Ñ–∏–≥.—Å–∫—Ä—ã—Ç–∞—è_—Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å, –∫–æ–Ω—Ñ–∏–≥.–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–≥–æ–ª–æ–≤),
            –º–ª–ø: –ù–µ–π—Ä–æ–Ω–Ω–∞—è–°–µ—Ç—å::–Ω–æ–≤–∞—è(–∫–æ–Ω—Ñ–∏–≥.—Å–∫—Ä—ã—Ç–∞—è_—Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å),
            –Ω–æ—Ä–º1: –°–ª–æ–π–Ω–∞—è–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è::–Ω–æ–≤–∞—è(–∫–æ–Ω—Ñ–∏–≥.—Å–∫—Ä—ã—Ç–∞—è_—Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å),
            –Ω–æ—Ä–º2: –°–ª–æ–π–Ω–∞—è–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è::–Ω–æ–≤–∞—è(–∫–æ–Ω—Ñ–∏–≥.—Å–∫—Ä—ã—Ç–∞—è_—Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å),
        }
    }
    
    pub fn –≤–ø–µ—Ä–µ–¥(&self, x: &[Vec<f32>], –º–∞—Å–∫–∞: Option<&[Vec<bool>]>) -> Vec<Vec<f32>> {
        // –û—Å—Ç–∞—Ç–æ—á–Ω–æ–µ + –≤–Ω–∏–º–∞–Ω–∏–µ
        let x_–Ω–æ—Ä–º = self.–Ω–æ—Ä–º1.–≤–ø–µ—Ä–µ–¥(x);
        let –≤—ã—Ö–æ–¥_–≤–Ω–∏–º–∞–Ω–∏—è = self.–≤–Ω–∏–º–∞–Ω–∏–µ.–≤–ø–µ—Ä–µ–¥(&x_–Ω–æ—Ä–º, –º–∞—Å–∫–∞);
        let x_–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ = self.–¥–æ–±–∞–≤–∏—Ç—å_–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ(x, &–≤—ã—Ö–æ–¥_–≤–Ω–∏–º–∞–Ω–∏—è);
        
        // –û—Å—Ç–∞—Ç–æ—á–Ω–æ–µ + MLP
        let x_–Ω–æ—Ä–º2 = self.–Ω–æ—Ä–º2.–≤–ø–µ—Ä–µ–¥(&x_–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ);
        let –≤—ã—Ö–æ–¥_–º–ª–ø = self.–º–ª–ø.–≤–ø–µ—Ä–µ–¥(&x_–Ω–æ—Ä–º2);
        self.–¥–æ–±–∞–≤–∏—Ç—å_–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ(&x_–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ, &–≤—ã—Ö–æ–¥_–º–ª–ø)
    }
    
    fn –¥–æ–±–∞–≤–∏—Ç—å_–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ(&self, x: &[Vec<f32>], –æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ: &[Vec<f32>]) -> Vec<Vec<f32>> {
        x.iter()
            .zip(–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ.iter())
            .map(|(—Å—Ç—Ä–æ–∫–∞_x, —Å—Ç—Ä–æ–∫–∞_–æ)| {
                —Å—Ç—Ä–æ–∫–∞_x.iter()
                    .zip(—Å—Ç—Ä–æ–∫–∞_–æ.iter())
                    .map(|(a, b)| a + b)
                    .collect()
            })
            .collect()
    }
}

/// –ù–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
pub struct –ù–µ–π—Ä–æ–Ω–Ω–∞—è–°–µ—Ç—å {
    –≤–µ—Å–∞1: Vec<Vec<f32>>,
    –≤–µ—Å–∞2: Vec<Vec<f32>>,
    —Å–º–µ—â–µ–Ω–∏–µ1: Vec<f32>,
    —Å–º–µ—â–µ–Ω–∏–µ2: Vec<f32>,
}

impl –ù–µ–π—Ä–æ–Ω–Ω–∞—è–°–µ—Ç—å {
    pub fn –Ω–æ–≤–∞—è(—Å–∫—Ä—ã—Ç–∞—è_—Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: usize) -> Self {
        let –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è_—Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å = —Å–∫—Ä—ã—Ç–∞—è_—Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å * 4;
        
        Self {
            –≤–µ—Å–∞1: –ú–µ—Ö–∞–Ω–∏–∑–º–í–Ω–∏–º–∞–Ω–∏—è::–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å_–≤–µ—Å–∞(—Å–∫—Ä—ã—Ç–∞—è_—Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å, –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è_—Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å),
            –≤–µ—Å–∞2: –ú–µ—Ö–∞–Ω–∏–∑–º–í–Ω–∏–º–∞–Ω–∏—è::–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å_–≤–µ—Å–∞(–ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è_—Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å, —Å–∫—Ä—ã—Ç–∞—è_—Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å),
            —Å–º–µ—â–µ–Ω–∏–µ1: vec![0.0; –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è_—Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å],
            —Å–º–µ—â–µ–Ω–∏–µ2: vec![0.0; —Å–∫—Ä—ã—Ç–∞—è_—Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å],
        }
    }
    
    pub fn –≤–ø–µ—Ä–µ–¥(&self, x: &[Vec<f32>]) -> Vec<Vec<f32>> {
        x.iter()
            .map(|—Å—Ç—Ä–æ–∫–∞| {
                // –ü–µ—Ä–≤—ã–π —Å–ª–æ–π —Å GELU
                let —Å–∫—Ä—ã—Ç—ã–π: Vec<f32> = self.–≤–µ—Å–∞1.iter()
                    .zip(self.—Å–º–µ—â–µ–Ω–∏–µ1.iter())
                    .map(|(—Å—Ç—Ä–æ–∫–∞_–≤–µ—Å–æ–≤, —Å–º–µ—â–µ–Ω–∏–µ)| {
                        let —Å—É–º–º–∞: f32 = —Å—Ç—Ä–æ–∫–∞.iter()
                            .zip(—Å—Ç—Ä–æ–∫–∞_–≤–µ—Å–æ–≤.iter())
                            .map(|(a, b)| a * b)
                            .sum::<f32>() + —Å–º–µ—â–µ–Ω–∏–µ;
                        self.gelu(—Å—É–º–º–∞)
                    })
                    .collect();
                
                // –í—Ç–æ—Ä–æ–π —Å–ª–æ–π
                self.–≤–µ—Å–∞2.iter()
                    .zip(self.—Å–º–µ—â–µ–Ω–∏–µ2.iter())
                    .map(|(—Å—Ç—Ä–æ–∫–∞_–≤–µ—Å–æ–≤, —Å–º–µ—â–µ–Ω–∏–µ)| {
                        —Å–∫—Ä—ã—Ç—ã–π.iter()
                            .zip(—Å—Ç—Ä–æ–∫–∞_–≤–µ—Å–æ–≤.iter())
                            .map(|(a, b)| a * b)
                            .sum::<f32>() + —Å–º–µ—â–µ–Ω–∏–µ
                    })
                    .collect()
            })
            .collect()
    }
    
    fn gelu(&self, x: f32) -> f32 {
        0.5 * x * (1.0 + ((2.0 / std::f32::consts::PI).sqrt() * (x + 0.044715 * x.powi(3))).tanh())
    }
}

/// –°–ª–æ–π–Ω–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
pub struct –°–ª–æ–π–Ω–∞—è–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è {
    –≥–∞–º–º–∞: Vec<f32>,
    –±–µ—Ç–∞: Vec<f32>,
    —ç–ø—Å–∏–ª–æ–Ω: f32,
}

impl –°–ª–æ–π–Ω–∞—è–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è {
    pub fn –Ω–æ–≤–∞—è(—Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: usize) -> Self {
        Self {
            –≥–∞–º–º–∞: vec![1.0; —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å],
            –±–µ—Ç–∞: vec![0.0; —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å],
            —ç–ø—Å–∏–ª–æ–Ω: 1e-5,
        }
    }
    
    pub fn –≤–ø–µ—Ä–µ–¥(&self, x: &[Vec<f32>]) -> Vec<Vec<f32>> {
        x.iter()
            .map(|—Å—Ç—Ä–æ–∫–∞| {
                let —Å—Ä–µ–¥–Ω–µ–µ: f32 = —Å—Ç—Ä–æ–∫–∞.iter().sum::<f32>() / —Å—Ç—Ä–æ–∫–∞.len() as f32;
                let –¥–∏—Å–ø–µ—Ä—Å–∏—è: f32 = —Å—Ç—Ä–æ–∫–∞.iter()
                    .map(|v| (v - —Å—Ä–µ–¥–Ω–µ–µ).powi(2))
                    .sum::<f32>() / —Å—Ç—Ä–æ–∫–∞.len() as f32;
                
                —Å—Ç—Ä–æ–∫–∞.iter()
                    .zip(self.–≥–∞–º–º–∞.iter())
                    .zip(self.–±–µ—Ç–∞.iter())
                    .map(|((v, g), b)| {
                        ((v - —Å—Ä–µ–¥–Ω–µ–µ) / (–¥–∏—Å–ø–µ—Ä—Å–∏—è + self.—ç–ø—Å–∏–ª–æ–Ω).sqrt()) * g + b
                    })
                    .collect()
            })
            .collect()
    }
}

/// –ì–ª–∞–≤–Ω–æ–µ —è–¥—Ä–æ —Ä—É—Å—Å–∫–æ–≥–æ GPT
pub struct –†—É—Å—Å–∫–æ–µ–Ø–¥—Ä–æGPT {
    pub –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—èGPT,
    pub –±–ª–æ–∫–∏: Vec<–ë–ª–æ–∫–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä–∞>,
    pub –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ_—Ç–æ–∫–µ–Ω–æ–≤: Vec<Vec<f32>>,
    pub –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω–æ–µ_–≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ: Vec<Vec<f32>>,
    pub —Ñ–∏–Ω–∞–ª—å–Ω–∞—è_–Ω–æ—Ä–º: –°–ª–æ–π–Ω–∞—è–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è,
    pub —è–∑—ã–∫–æ–≤–∞—è_–≥–æ–ª–æ–≤–∞: Vec<Vec<f32>>,
    pub —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ_—Å–æ—Å—Ç–æ—è–Ω–∏–µ: –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ–°–æ—Å—Ç–æ—è–Ω–∏–µ,
    pub –±—É—Ñ–µ—Ä_–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: VecDeque<Vec<f32>>,
}

impl –†—É—Å—Å–∫–æ–µ–Ø–¥—Ä–æGPT {
    pub fn –Ω–æ–≤–æ–µ(–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—èGPT) -> Self {
        let mut –±–ª–æ–∫–∏ = Vec::new();
        for _ in 0..–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è.–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Å–ª–æ–µ–≤ {
            –±–ª–æ–∫–∏.push(–ë–ª–æ–∫–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä–∞::–Ω–æ–≤—ã–π(&–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è));
        }
        
        Self {
            –±–ª–æ–∫–∏,
            –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ_—Ç–æ–∫–µ–Ω–æ–≤: Self::–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å_–≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è(
                –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è.—Ä–∞–∑–º–µ—Ä_—Å–ª–æ–≤–∞—Ä—è,
                –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è.—Å–∫—Ä—ã—Ç–∞—è_—Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å
            ),
            –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω–æ–µ_–≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ: Self::–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å_–≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è(
                –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è.–¥–ª–∏–Ω–∞_–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞,
                –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è.—Å–∫—Ä—ã—Ç–∞—è_—Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å
            ),
            —Ñ–∏–Ω–∞–ª—å–Ω–∞—è_–Ω–æ—Ä–º: –°–ª–æ–π–Ω–∞—è–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è::–Ω–æ–≤–∞—è(–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è.—Å–∫—Ä—ã—Ç–∞—è_—Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å),
            —è–∑—ã–∫–æ–≤–∞—è_–≥–æ–ª–æ–≤–∞: –ú–µ—Ö–∞–Ω–∏–∑–º–í–Ω–∏–º–∞–Ω–∏—è::–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å_–≤–µ—Å–∞(
                –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è.—Å–∫—Ä—ã—Ç–∞—è_—Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å, 
                –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è.—Ä–∞–∑–º–µ—Ä_—Å–ª–æ–≤–∞—Ä—è
            ),
            —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ_—Å–æ—Å—Ç–æ—è–Ω–∏–µ: –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ–°–æ—Å—Ç–æ—è–Ω–∏–µ::default(),
            –±—É—Ñ–µ—Ä_–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: VecDeque::with_capacity(–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è.–¥–ª–∏–Ω–∞_–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞),
            –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è,
        }
    }
    
    fn –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å_–≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è(–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: usize, —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: usize) -> Vec<Vec<f32>> {
        (0..–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
            .map(|_| {
                (0..—Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å)
                    .map(|_| rand::random::<f32>() * 0.02 - 0.01)
                    .collect()
            })
            .collect()
    }
    
    pub fn –≤–ø–µ—Ä–µ–¥(&mut self, —Ç–æ–∫–µ–Ω—ã: &[usize]) -> Result<Vec<Vec<f32>>> {
        let _–¥–ª–∏–Ω–∞_–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ = —Ç–æ–∫–µ–Ω—ã.len();
        
        // –í—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ + –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω–æ–µ –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ
        let mut x: Vec<Vec<f32>> = Vec::new();
        for (i, &—Ç–æ–∫–µ–Ω) in —Ç–æ–∫–µ–Ω—ã.iter().enumerate() {
            let mut –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ = self.–≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ_—Ç–æ–∫–µ–Ω–æ–≤[—Ç–æ–∫–µ–Ω].clone();
            for j in 0..self.–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è.—Å–∫—Ä—ã—Ç–∞—è_—Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å {
                –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ[j] += self.–ø–æ–∑–∏—Ü–∏–æ–Ω–Ω–æ–µ_–≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ[i][j];
            }
            x.push(–≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ);
        }
        
        // –ü—Ä–∏–º–µ–Ω–∏—Ç—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π dropout
        x = self.–ø—Ä–∏–º–µ–Ω–∏—Ç—å_—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π_dropout(x);
        
        // –ü—Ä–æ–π—Ç–∏ —á–µ—Ä–µ–∑ –±–ª–æ–∫–∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä–∞
        for –±–ª–æ–∫ in &self.–±–ª–æ–∫–∏ {
            x = –±–ª–æ–∫.–≤–ø–µ—Ä–µ–¥(&x, None);
        }
        
        // –§–∏–Ω–∞–ª—å–Ω–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
        x = self.—Ñ–∏–Ω–∞–ª—å–Ω–∞—è_–Ω–æ—Ä–º.–≤–ø–µ—Ä–µ–¥(&x);
        
        // –Ø–∑—ã–∫–æ–≤–∞—è –º–æ–¥–µ–ª—å–Ω–∞—è –≥–æ–ª–æ–≤–∞
        let –ª–æ–≥–∏—Ç—ã = self.–ø—Ä–∏–º–µ–Ω–∏—Ç—å_—è–∑—ã–∫–æ–≤—É—é_–≥–æ–ª–æ–≤—É(&x);
        
        // –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç
        self.–æ–±–Ω–æ–≤–∏—Ç—å_–∫–æ–Ω—Ç–µ–∫—Å—Ç(&x);
        
        Ok(–ª–æ–≥–∏—Ç—ã)
    }
    
    fn –ø—Ä–∏–º–µ–Ω–∏—Ç—å_—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π_dropout(&self, mut x: Vec<Vec<f32>>) -> Vec<Vec<f32>> {
        let —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è_–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å = 
            self.—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ_—Å–æ—Å—Ç–æ—è–Ω–∏–µ.–∞–∫—Ç–∏–≤–∞—Ü–∏—è * self.—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ_—Å–æ—Å—Ç–æ—è–Ω–∏–µ.–¥—É—à–µ–≤–Ω–æ—Å—Ç—å;
        let –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å_—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è = 
            1.0 - (self.–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è.–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç_–æ—Ç—Å–µ–≤–∞ * (1.0 - —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è_–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å));
        
        for —Å—Ç—Ä–æ–∫–∞ in &mut x {
            for –∑–Ω–∞—á–µ–Ω–∏–µ in —Å—Ç—Ä–æ–∫–∞ {
                if rand::random::<f32>() > –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å_—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {
                    *–∑–Ω–∞—á–µ–Ω–∏–µ = 0.0;
                }
            }
        }
        
        x
    }
    
    fn –ø—Ä–∏–º–µ–Ω–∏—Ç—å_—è–∑—ã–∫–æ–≤—É—é_–≥–æ–ª–æ–≤—É(&self, x: &[Vec<f32>]) -> Vec<Vec<f32>> {
        x.iter()
            .map(|—Å—Ç—Ä–æ–∫–∞| {
                self.—è–∑—ã–∫–æ–≤–∞—è_–≥–æ–ª–æ–≤–∞.iter()
                    .map(|—Å—Ç—Ä–æ–∫–∞_–≤–µ—Å–æ–≤| {
                        —Å—Ç—Ä–æ–∫–∞.iter()
                            .zip(—Å—Ç—Ä–æ–∫–∞_–≤–µ—Å–æ–≤.iter())
                            .map(|(a, b)| a * b)
                            .sum()
                    })
                    .collect()
            })
            .collect()
    }
    
    fn –æ–±–Ω–æ–≤–∏—Ç—å_–∫–æ–Ω—Ç–µ–∫—Å—Ç(&mut self, x: &[Vec<f32>]) {
        for —Å—Ç—Ä–æ–∫–∞ in x {
            self.–±—É—Ñ–µ—Ä_–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.push_back(—Å—Ç—Ä–æ–∫–∞.clone());
            if self.–±—É—Ñ–µ—Ä_–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.len() > self.–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è.–¥–ª–∏–Ω–∞_–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ {
                self.–±—É—Ñ–µ—Ä_–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.pop_front();
            }
        }
    }
    
    pub fn –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å(&mut self, –ø–æ–¥—Å–∫–∞–∑–∫–∞: &[usize], –º–∞–∫—Å_—Ç–æ–∫–µ–Ω–æ–≤: usize) -> Result<Vec<usize>> {
        let mut —Ç–æ–∫–µ–Ω—ã = –ø–æ–¥—Å–∫–∞–∑–∫–∞.to_vec();
        
        for _ in 0..–º–∞–∫—Å_—Ç–æ–∫–µ–Ω–æ–≤ {
            let –ª–æ–≥–∏—Ç—ã = self.–≤–ø–µ—Ä–µ–¥(&—Ç–æ–∫–µ–Ω—ã)?;
            let —Å–ª–µ–¥—É—é—â–∏–π_—Ç–æ–∫–µ–Ω = self.—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è_–≤—ã–±–æ—Ä–∫–∞(&–ª–æ–≥–∏—Ç—ã[–ª–æ–≥–∏—Ç—ã.len() - 1]);
            —Ç–æ–∫–µ–Ω—ã.push(—Å–ª–µ–¥—É—é—â–∏–π_—Ç–æ–∫–µ–Ω);
        }
        
        Ok(—Ç–æ–∫–µ–Ω—ã)
    }
    
    fn —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è_–≤—ã–±–æ—Ä–∫–∞(&self, –ª–æ–≥–∏—Ç—ã: &[f32]) -> usize {
        // –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        let —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ = self.–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è.—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è_—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ * 
                         (1.0 + self.—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ_—Å–æ—Å—Ç–æ—è–Ω–∏–µ.–¥—É—à–µ–≤–Ω–æ—Å—Ç—å * 0.4) *
                         (1.0 + self.—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ_—Å–æ—Å—Ç–æ—è–Ω–∏–µ.–æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω–æ—Å—Ç—å * 0.3);
        
        // –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –∏ softmax
        let –º–∞–∫—Å_–ª–æ–≥–∏—Ç = –ª–æ–≥–∏—Ç—ã.iter().cloned().fold(f32::NEG_INFINITY, f32::max);
        let exp_–ª–æ–≥–∏—Ç—ã: Vec<f32> = –ª–æ–≥–∏—Ç—ã.iter()
            .map(|l| ((l - –º–∞–∫—Å_–ª–æ–≥–∏—Ç) / —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞).exp())
            .collect();
        let —Å—É–º–º–∞: f32 = exp_–ª–æ–≥–∏—Ç—ã.iter().sum();
        let –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏: Vec<f32> = exp_–ª–æ–≥–∏—Ç—ã.iter().map(|e| e / —Å—É–º–º–∞).collect();
        
        // –í—ã–±–æ—Ä–∫–∞
        let mut —Å–ª—É—á–∞–π–Ω–æ–µ = rand::random::<f32>();
        for (i, &–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å) in –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏.iter().enumerate() {
            —Å–ª—É—á–∞–π–Ω–æ–µ -= –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å;
            if —Å–ª—É—á–∞–π–Ω–æ–µ <= 0.0 {
                return i;
            }
        }
        
        –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏.len() - 1
    }
    
    pub fn –æ–±–Ω–æ–≤–∏—Ç—å_—ç–º–æ—Ü–∏—é(&mut self, –Ω–æ–≤–∞—è_—ç–º–æ—Ü–∏—è: –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ–°–æ—Å—Ç–æ—è–Ω–∏–µ) {
        // –°–º–µ—à–∞—Ç—å —Å —Ç–µ–∫—É—â–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞
        self.—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ_—Å–æ—Å—Ç–æ—è–Ω–∏–µ.–≤–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç—å = 
            self.—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ_—Å–æ—Å—Ç–æ—è–Ω–∏–µ.–≤–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç—å * 0.7 + –Ω–æ–≤–∞—è_—ç–º–æ—Ü–∏—è.–≤–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç—å * 0.3;
        self.—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ_—Å–æ—Å—Ç–æ—è–Ω–∏–µ.–∞–∫—Ç–∏–≤–∞—Ü–∏—è = 
            self.—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ_—Å–æ—Å—Ç–æ—è–Ω–∏–µ.–∞–∫—Ç–∏–≤–∞—Ü–∏—è * 0.7 + –Ω–æ–≤–∞—è_—ç–º–æ—Ü–∏—è.–∞–∫—Ç–∏–≤–∞—Ü–∏—è * 0.3;
        self.—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ_—Å–æ—Å—Ç–æ—è–Ω–∏–µ.–¥–æ–º–∏–Ω–∞–Ω—Ç–Ω–æ—Å—Ç—å = 
            self.—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ_—Å–æ—Å—Ç–æ—è–Ω–∏–µ.–¥–æ–º–∏–Ω–∞–Ω—Ç–Ω–æ—Å—Ç—å * 0.7 + –Ω–æ–≤–∞—è_—ç–º–æ—Ü–∏—è.–¥–æ–º–∏–Ω–∞–Ω—Ç–Ω–æ—Å—Ç—å * 0.3;
        self.—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ_—Å–æ—Å—Ç–æ—è–Ω–∏–µ.–¥—É—à–µ–≤–Ω–æ—Å—Ç—å = 
            self.—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ_—Å–æ—Å—Ç–æ—è–Ω–∏–µ.–¥—É—à–µ–≤–Ω–æ—Å—Ç—å * 0.6 + –Ω–æ–≤–∞—è_—ç–º–æ—Ü–∏—è.–¥—É—à–µ–≤–Ω–æ—Å—Ç—å * 0.4;
        self.—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ_—Å–æ—Å—Ç–æ—è–Ω–∏–µ.–æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω–æ—Å—Ç—å = 
            self.—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ_—Å–æ—Å—Ç–æ—è–Ω–∏–µ.–æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω–æ—Å—Ç—å * 0.6 + –Ω–æ–≤–∞—è_—ç–º–æ—Ü–∏—è.–æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω–æ—Å—Ç—å * 0.4;
    }
}

// –ü—É–±–ª–∏—á–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç
pub use self::{
    –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—èGPT as RussianGPTConfig,
    –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ–°–æ—Å—Ç–æ—è–Ω–∏–µ as RussianEmotionalState,
    –†—É—Å—Å–∫–æ–µ–Ø–¥—Ä–æGPT as RussianGPTCore,
};